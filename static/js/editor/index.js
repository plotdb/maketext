// Generated by LiveScript 1.3.0
$(document).ready(function(){
  var k, ref$, v, editor, updateText, scrollto, list, res$, html, i$, to$, i, code, j$, j, d, initSlider, initColorpicker, clusterize;
  for (k in ref$ = effects) {
    v = ref$[k];
    eval(v.js);
    v.js = ret;
  }
  window.editor = editor = {
    effects: effects,
    config: {
      cur: {},
      old: {}
    }
  };
  updateText = function(node){
    var textInput, value;
    node = node || document.querySelector('#text-input');
    textInput = document.querySelector('#text-input');
    value = node.value || 'Hello World!';
    Array.from(document.querySelectorAll('.gallery text')).map(function(d, i){
      return d.textContent = value;
    });
    Array.from(document.querySelectorAll('#cooltext text')).map(function(it){
      return it.textContent = value;
    });
    return textInput.value = value;
  };
  window.scrollto = scrollto = function(node){
    return $('html,body').animate({
      scrollTop: $(node).offset().top
    }, 300);
  };
  document.querySelector('#landing input').addEventListener('keyup', function(e){
    if (e.keyCode === 13) {
      scrollto('#top');
    }
    return updateText(this);
  });
  document.querySelector('#text-input').addEventListener('keyup', function(){
    return updateText(this);
  });
  editor.update = function(name, value){
    var svg, this$ = this;
    this.config.old = JSON.parse(JSON.stringify(this.config.cur));
    this.config.cur[name] = value;
    svg = document.querySelector('#cooltext svg');
    if (document.body.classList.contains('editing')) {
      this.effects[effects.type].js.watch(this.config.cur, this.config.old, svg);
      if (name === 'background') {
        svg.style.background = value;
      }
      if (name === 'fontSize') {
        svg.querySelector('text').style.fontSize = value + "px";
      }
      return;
    }
    if (name === 'fontSize') {
      Array.from(document.querySelectorAll('.gallery text')).map(function(node, i){
        return node.style.fontSize = value + "px";
      });
    }
    Array.from(document.querySelectorAll('.gallery .item')).map(function(d, i){
      var type;
      if (!d.parentNode.style.opacity) {
        return;
      }
      type = d.getAttribute('data-type');
      if (!(this$.effects[type].js && this$.effects[type].watch)) {
        return;
      }
      return this$.effects[type].js.watch(this$.config.cur, this$.config.old, d);
    });
    if (name === 'background') {
      return Array.from(document.querySelectorAll('.gallery svg')).map(function(d, i){
        return d.style.background = value;
      });
    }
  };
  res$ = [];
  for (k in ref$ = effects) {
    v = ref$[k];
    res$.push([k, v]);
  }
  list = res$;
  html = [];
  for (i$ = 0, to$ = list.length; i$ < to$; i$ += 2) {
    i = i$;
    code = "";
    for (j$ = 0; j$ <= 1; ++j$) {
      j = j$;
      d = list[i + j];
      if (!d) {
        break;
      }
      code += "<div class=\"item\" data-type=\"" + d[0] + "\"><div class=\"inner\">" + d[1].html + "</div></div>";
    }
    html.push("<div class=\"line\" style=\"visibility:hidden\">" + code + "</div>");
  }
  initSlider = function(node, key, value){
    return $(node.querySelector('.irs-input')).ionRangeSlider({
      min: value.min || 0,
      max: value.max || 100,
      onChange: function(data){
        return editor.update(key, data.from);
      }
    });
  };
  initColorpicker = function(node, key, value){
    var ldcp;
    ldcp = new ldColorPicker(node.querySelector('input'), {});
    return ldcp.on('change', function(it){
      editor.update(key, it);
      return node.querySelector('.inner').style.background = it;
    });
  };
  document.querySelector('.gallery').addEventListener('click', function(e){
    var target, type, effect, options, k, ref$, v, node, results$ = [];
    target = e.target;
    if (!(target && target.classList && target.classList.contains('item'))) {
      return;
    }
    type = target.getAttribute('data-type');
    if (!type) {
      return;
    }
    document.querySelector('#cooltext').innerHTML = effects[type].html;
    document.body.classList.add('editing');
    Array.from(document.querySelectorAll('#cooltext text')).map(function(it){
      return it.textContent = document.querySelector('#text-input').value || 'Hello World';
    });
    editor.effects.type = type;
    effect = editor.effects[type];
    if (effect.js && effect.js.edit) {
      options = document.querySelector('#editor-custom-options');
      options.innerHTML = '';
      for (k in ref$ = effect.js.edit) {
        v = ref$[k];
        node = document.querySelector("#editor-option-sample-" + v.type);
        if (!node) {
          continue;
        }
        node = node.cloneNode(true);
        if (v.type === 'color') {
          node.querySelector('label').textContent = v.name;
          node.querySelector('input').setAttribute('name', k);
          initColorpicker(node, k, v);
        } else if (v.type === 'number') {
          node.querySelector('label').textContent = v.name;
          node.querySelector('input').setAttribute('name', k, v);
          initSlider(node, k, v);
        }
        results$.push(options.appendChild(node));
      }
      return results$;
    }
  });
  clusterize = new Clusterize({
    rows: html,
    scrollElem: document.querySelector('body'),
    contentElem: document.querySelector('#gallery'),
    rows_in_block: 50
  });
  document.addEventListener('scroll', function(e){
    var scrolltop, editor, height;
    scrolltop = document.scrollingElement.scrollTop;
    editor = document.querySelector('#editor');
    if (scrolltop > 200) {
      editor.classList.add('on');
    } else {
      editor.classList.remove('on');
    }
    height = window.innerHeight;
    return Array.from(document.querySelectorAll('.gallery .line')).map(function(d, i){
      var box;
      box = d.getBoundingClientRect();
      if (box.y + box.height < 0 || box.y > height) {
        d.style.visibility = 'hidden';
      } else {
        d.style.visibility = 'visible';
      }
      if (box.y + box.height < 0 || box.y + box.height > height) {
        return d.style.opacity = 0;
      } else {
        return d.style.opacity = 1;
      }
    });
  });
  ldColorPicker.init();
  return Array.from(document.querySelectorAll('#font-size-slider .up.irs-input')).map(function(d, i){
    return $(d).ionRangeSlider({
      onChange: function(data){
        return editor.update('fontSize', data.from);
      }
    });
  });
});