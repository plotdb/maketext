// Generated by LiveScript 1.3.0
var ret;
ret = {
  name: '',
  desc: '',
  tags: '',
  slug: '',
  init: function(){},
  edit: {
    fill: {
      name: 'fill',
      type: 'color',
      'default': '#f00'
    },
    stroke: {
      name: 'stroke',
      type: 'color',
      'default': '#fff'
    },
    extrusion: {
      name: 'extrusion',
      type: 'color',
      'default': '#900'
    },
    innerShadow: {
      name: 'inner shadow',
      type: 'color',
      'default': '#000'
    },
    shadow: {
      name: 'shadow',
      type: 'color',
      'default': '#444'
    },
    depth: {
      name: 'depth',
      type: 'number',
      'default': 9,
      min: 1,
      max: 13
    }
  },
  watch: function(n, o, node){
    var floods, convs, offset, matrix, res$, i$, to$, i, j$, to1$, j, order, d;
    floods = node.querySelectorAll('feFlood');
    if (n.extrusion != null) {
      floods[0].setAttribute('flood-color', n.extrusion);
    }
    if (n.innerShadow != null) {
      floods[1].setAttribute('flood-color', n.innerShadow);
    }
    if (n.fill !== o.fill) {
      floods[2].setAttribute('flood-color', n.fill);
    }
    if (n.shadow != null) {
      floods[4].setAttribute('flood-color', n.shadow);
    }
    if (n.stroke !== o.stroke) {
      node.querySelectorAll('text')[1].setAttribute('stroke', n.stroke);
    }
    if (n.depth != null) {
      convs = node.querySelectorAll('feConvolveMatrix');
      offset = node.querySelectorAll('feOffset');
      res$ = [];
      for (i$ = 0, to$ = n.depth; i$ < to$; ++i$) {
        i = i$;
        for (j$ = 0, to1$ = n.depth; j$ < to1$; ++j$) {
          j = j$;
          if (i === j) {
            res$.push(1);
          } else {
            res$.push(0);
          }
        }
      }
      matrix = res$;
      order = n.depth + "," + n.depth;
      [0, 2].map(function(it){
        var x$, y$;
        x$ = convs[it];
        x$.setAttribute('kernelMatrix', matrix);
        x$.setAttribute('order', order);
        y$ = offset[it];
        y$.setAttribute('dx', Math.ceil(n.depth * 0.5) * (it + 1));
        y$.setAttribute('dy', Math.ceil(n.depth * 0.5) * (it + 1));
        return y$;
      });
      d = n.depth * -1;
      return node.querySelector('g').setAttribute('transform', "translate(" + d + "," + d + ")");
    }
  },
  dom: function(config){}
};
if (typeof module != 'undefined' && module !== null) {
  module.exports = ret;
}